/// <reference types="webxr" />
import { Component, Type, Object3D, RayHit } from '@wonderlandengine/api';
import { vec3 } from 'gl-matrix';
import { CursorTarget } from './cursor-target.js';
/**
 * 3D cursor for desktop/mobile/VR.
 *
 * Implements a ray-casting cursor into the scene. To react to
 * clicking/hover/unhover/cursor down/cursor up/move use a
 * [cursor-target](#cursor-target).
 *
 * For VR, the ray is cast in direction of
 * [this.object.getForward()](/jsapi/object/#getforward). For desktop and mobile, the
 * forward vector is inverse-projected to account for where on screen the user clicked.
 *
 * `.globalTarget` can be used to call callbacks for all objects, even those that
 * do not have a cursor target attached, but match the collision group.
 *
 * See [Animation Example](/showcase/animation).
 */
export declare class Cursor extends Component {
    static TypeName: string;
    static Properties: {
        /** Collision group for the ray cast. Only objects in this group will be affected by this cursor. */
        collisionGroup: {
            type: Type;
            default: number;
        };
        /** (optional) Object that visualizes the cursor's ray. */
        cursorRayObject: {
            type: Type;
        };
        /** Axis along which to scale the `cursorRayObject`. */
        cursorRayScalingAxis: {
            type: Type;
            values: string[];
            default: string;
        };
        /** (optional) Object that visualizes the cursor's hit location. */
        cursorObject: {
            type: Type;
        };
        /** Handedness for VR cursors to accept trigger events only from respective controller. */
        handedness: {
            type: Type;
            values: string[];
            default: string;
        };
        /** Mode for raycasting, whether to use PhysX or simple collision components */
        rayCastMode: {
            type: Type;
            values: string[];
            default: string;
        };
        /** Whether to set the CSS style of the mouse cursor on desktop */
        styleCursor: {
            type: Type;
            default: boolean;
        };
    };
    private collisionMask;
    private maxDistance;
    private onDestroyCallbacks;
    private input;
    private origin;
    private cursorObjScale;
    private direction;
    private tempVec;
    private projectionMatrix;
    private viewComponent;
    private visible;
    private isDown;
    private lastIsDown;
    private arTouchDown;
    cursorPos: Float32Array;
    private lastCursorPosOnTarget;
    private hoveringObject;
    private hoveringObjectTarget;
    private cursorRayScale;
    globalTarget: CursorTarget | null;
    collisionGroup: number;
    cursorRayObject: Object3D | null;
    cursorRayScalingAxis: number;
    cursorObject: Object3D | null;
    handedness: number | string;
    rayCastMode: number | string;
    styleCursor: boolean;
    start(): void;
    onViewportResize(): void;
    _setCursorRayTransform(hitPosition: vec3): void;
    _setCursorVisibility(visible: boolean): void;
    update(): void;
    doUpdate(doClick: boolean): void;
    hoverBehaviour(rayHit: RayHit, doClick: boolean): void;
    /**
     * Setup event listeners on session object
     * @param s WebXR session
     *
     * Sets up 'select' and 'end' events and caches the session to avoid
     * Module object access.
     */
    setupVREvents(s: XRSession): void;
    /** 'select' event listener */
    onSelect(e: XRInputSourceEvent): void;
    /** 'selectstart' event listener */
    onSelectStart(e: XRInputSourceEvent): void;
    /** 'selectend' event listener */
    onSelectEnd(e: XRInputSourceEvent): void;
    /** 'pointermove' event listener */
    onPointerMove(e: PointerEvent): void;
    /** 'click' event listener */
    onClick(e: MouseEvent): void;
    /** 'pointerdown' event listener */
    onPointerDown(e: PointerEvent): void;
    /** 'pointerup' event listener */
    onPointerUp(e: PointerEvent): void;
    /**
     * Update mouse position in non-VR mode and raycast for new position
     * @returns @ref WL.RayHit for new position.
     */
    updateMousePos(clientX: number, clientY: number, w: number, h: number): RayHit;
    updateDirection(): RayHit;
    onDeactivate(): void;
    onActivate(): void;
    onDestroy(): void;
}
